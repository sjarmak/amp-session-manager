# evals/model-benchmark.yaml
version: 1
name: "Amp Session Orchestrator – Model Benchmark v1"
description: >
  End-to-end evaluation covering smoke tasks, interactive repo work,
  and SWE-bench bug-fixing across default, gpt-5 and alloy modes.
  Metrics captured: success-rate, iteration-counts, token-usage, cost.

###############################################################################
# GLOBAL DEFAULTS – may be overridden per-suite or per-case
###############################################################################
defaults:
  base_branch: main
  parallel: 4               # how many repos to run in parallel
  max_iterations: 10
  timeout_sec: 900          # 15 min wall-clock per case
  json_logs: true           # force --stream-json for telemetry extraction
  merge_on_pass: false      # never merge – we only measure

###############################################################################
# MODELS / RUN CONFIGS
###############################################################################
models:
  default:
    name: default           # no CLI overrides → whatever amp chooses
  gpt5:
    name: gpt-5
    amp_args: ["--try-gpt5"]
  alloy:
    name: alloy
    amp_args: ["--blend", "alloy-random"]

###############################################################################
# METRICS – the report generator will aggregate these for each model
###############################################################################
metrics:
  - success_rate            # passed / total
  - avg_iterations          # average iterations per case
  - total_runtime_sec       # total wall clock time

###############################################################################
# EVALUATION SUITES
###############################################################################
suites:

  # 1. simple-smoke – should finish in one pass, good sanity check
  - id: smoke
    description: "Single-turn CRUD / scaffolding tasks – validates harness."
    cases:
      - id: hello_readme
        repo: octocat/Hello-World
        prompt: |
          Create a README.md that explains how to run the project, add it,
          commit it, and make sure `cat README.md` shows the expected text.
        script_command: "grep -q 'Hello World' README.md"
      - id: add_function
        repo: scratch/simple-math-lib
        setup_script: |
          echo > math.py "def sub(a,b): return a-b"
        prompt: |
          Add a function `add(a: int, b: int) -> int` to math.py and a pytest
          file tests/test_add.py that asserts add(2,3)==5.
        script_command: "pytest -q"

  # 2. interactive-repo – deliberately needs ≥3 iterations to trigger
  #    model swaps in alloy mode.
  - id: interactive_repo
    description: "Multi-turn iterative tasks (refactor, optimise, test)."
    cases:
      - id: refactor_requests_json
        repo: psf/requests
        prompt: |
          Refactor requests.models.Response.json() to use the std-lib json
          module instead of simplejson while keeping identical behaviour.
        follow_up_prompts:
          - "Now optimise for performance when content length > 1 MiB."
          - "Add type hints and update/extend the unit tests."
        script_command: "pytest tests/test_json.py -q"
      - id: typing_fastapi_example
        repo: tiangolo/fastapi
        prompt: |
          Introduce Pydantic v2 type-validation in docs/src/tutorial/*
          examples and adjust the corresponding tests.
        follow_up_prompts:
          - "Ensure mypy passes with --strict."
          - "Benchmark performance and summarise the impact."
        script_command: |
          bash -c "pytest -q && mypy docs/src/tutorial --strict"

  # 3. SWE-bench – quick cases that often succeed in ≤2 iterations
  - id: swebench_quick
    description: "30 easy SWE-bench cases (sanity, comparer)."
    swebench_cases_dir: "eval_data/swebench/quick"   # 30 *.json files
    max_iterations: 6

  # 4. SWE-bench – hard cases known to require multiple attempts
  - id: swebench_hard
    description: "20 challenging SWE-bench cases (multi-turn expected)."
    swebench_cases_dir: "eval_data/swebench/hard"    # 20 *.json files
    max_iterations: 10
