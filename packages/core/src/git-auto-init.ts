import { GitOps } from './git.js';
import { writeFile } from 'fs/promises';
import { join } from 'path';

/**
 * Helper to automatically initialize a directory as a git repository
 * and set up an AGENT.md file if the directory is not already a git repo
 */
export class GitAutoInit {
  
  /**
   * Check if directory needs initialization and perform it if needed
   * @param dirPath - Directory path to check and potentially initialize
   * @returns Promise<boolean> - true if initialization was performed, false if already a git repo
   */
  static async ensureGitRepo(dirPath: string): Promise<boolean> {
    const git = new GitOps(dirPath);
    
    // Check if already a git repository
    const isRepo = await git.isRepo();
    if (isRepo) {
      return false; // Already a git repo, no initialization needed
    }
    
    console.log(`ðŸ”§ Directory ${dirPath} is not a git repository, initializing...`);
    
    // Initialize git repository with main branch
    await git.initWithMainBranch();
    
    // Create AGENT.md file
    const agentMdPath = join(dirPath, 'AGENT.md');
    const agentMdContent = GitAutoInit.generateAgentMdTemplate();
    
    await writeFile(agentMdPath, agentMdContent, 'utf-8');
    
    // Stage and commit the AGENT.md file
    await git.exec(['add', 'AGENT.md'], dirPath);
    await git.exec(['commit', '-m', 'Initial commit: Add AGENT.md for amp session management'], dirPath);
    
    console.log(`âœ… Initialized git repository with AGENT.md at ${dirPath}`);
    
    return true; // Initialization was performed
  }
  
  /**
   * Generate an AGENT.md template suitable for parallel sessions, benchmarks, and evaluations
   */
  private static generateAgentMdTemplate(): string {
    return `# AGENT.md â€” Project Configuration for Amp Session Manager

This file helps Amp understand how to work effectively in this project during sessions, benchmarks, and evaluations.

## Project Information

- **Project Type**: [Describe your project type, e.g., React App, Node.js API, Python Library, etc.]
- **Language**: [Primary language, e.g., TypeScript, Python, Go, etc.]
- **Framework**: [Framework if applicable, e.g., React, Express, FastAPI, etc.]

## Development Commands

Amp will use these commands to validate code quality and run tests during sessions:

### Build/Typecheck
\`\`\`bash
# Add your build or typecheck command here, e.g.:
# npm run build
# pnpm typecheck  
# cargo check
# python -m mypy .
\`\`\`

### Test
\`\`\`bash
# Add your test command here, e.g.:
# npm test
# pnpm test
# pytest
# go test ./...
\`\`\`

### Lint
\`\`\`bash
# Add your lint command here, e.g.:
# npm run lint
# eslint src/
# flake8 .
# golangci-lint run
\`\`\`

## Project Structure

Describe the key directories and files in your project:

- \`src/\` - Source code
- \`tests/\` - Test files  
- \`docs/\` - Documentation
- \`config/\` - Configuration files

## Development Guidelines

### Code Style
- [Describe your code style preferences]
- [Mention any specific naming conventions]
- [Note any architectural patterns to follow]

### Testing Strategy
- [Describe your testing approach]
- [Mention coverage expectations]
- [Note any specific test patterns to follow]

## Dependencies

### Prerequisites
- [List any required tools, e.g., Node.js 18+, Python 3.9+, etc.]

### Package Management
- [Note your package manager, e.g., npm, pnpm, pip, cargo, etc.]

## Notes for Amp Sessions

- **Parallel Sessions**: This project supports parallel development sessions
- **Auto-commit**: Sessions can auto-commit changes for benchmarking and evaluation
- **Manual Review**: Interactive sessions allow manual review before committing

## Benchmarking & Evaluation Notes

When running benchmarks or evaluations:
- Tests should pass before considering a task complete
- Follow existing code patterns and conventions
- Prioritize maintainable, readable code
- Consider performance implications for changes

---

*This AGENT.md file was automatically generated by Amp Session Manager. 
You can customize it to better describe your project's specific needs.*
`;
  }
}
